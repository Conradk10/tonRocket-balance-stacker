import asyncio

from loguru import logger

from telethon.sync import TelegramClient
from telethon.utils import get_display_name
from telethon.tl.custom.conversation import Conversation
from telethon.tl.functions.contacts import UnblockRequest
from telethon.tl.functions.messages import GetMessagesRequest, GetBotCallbackAnswerRequest
from telethon.tl.types import Message

from config import (
    API_ID,
    API_HASH,
    DEVICE_MODEL,
    SYSTEM_VERSION,
    APP_VERSION,
    LANG_CODE,
    SYSTEM_LANG_CODE,
    OWNER_USERNAME,
    BOT_USERNAME
)

from utils import get_sessions_list


async def main():
    sessions = get_sessions_list()
    logger.info(f"–°–µ—Å—Å–∏–π: {len(sessions)}")
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ–∫–∏ –≤ –õ–°: {OWNER_USERNAME}")
    for session in sessions:
        logger.info(f"–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —á–µ—Ä–µ–∑ —Å–µ—Å—Å–∏—é {session}")
        try:
            client = TelegramClient(
                session=session,
                api_id=API_ID,
                api_hash=API_HASH,
                device_model=DEVICE_MODEL,
                system_version=SYSTEM_VERSION,
                app_version=APP_VERSION,
                lang_code=LANG_CODE,
                system_lang_code=SYSTEM_LANG_CODE
            )
            client.parse_mode = "html"
            await client.start()

            me = await client.get_me()
            logger.info(f"{get_display_name(me)} (uid: {me.id}) -> –ü–æ–¥–∫–ª—é—á–µ–Ω!")
        except:
            logger.error(f"{session} -> –ù–µ–≤–∞–ª–∏–¥.")
            continue

        await client(UnblockRequest(OWNER_USERNAME))
        await client(UnblockRequest(BOT_USERNAME))

        try:
            async with client.conversation(BOT_USERNAME) as conv:
                conv: Conversation
                await conv.send_message("/cheques")
                m: Message = await conv.get_response()
                if not m.reply_markup:
                    logger.error(f"{get_display_name(me)} (uid: {me.id}) -> "
                                 f"–Ω–µ –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —á–µ–∫–∞! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É...")
                    continue
                try:
                    for _ in range(5):  # —Å–æ–∑–¥–∞–µ–º —á–µ–∫ –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É
                        m: Message = (await client(GetMessagesRequest(id=[m.id]))).messages[0]
                        if "üì•" in m.reply_markup.rows[0].buttons[0].text:  # –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ —Å –¥–µ–ø–æ–∑–∏—Ç–æ–º –Ω–∞–π–¥–µ–Ω–∞
                            raise Exception("–Ω—É–ª–µ–≤–æ–π –±–∞–ª–∞–Ω—Å")
                        await client(GetBotCallbackAnswerRequest(
                            peer=BOT_USERNAME,
                            msg_id=m.id,
                            data=bytes(m.reply_markup.rows[0].buttons[0].data)
                        ))
                except Exception as err:
                    logger.error(f"{get_display_name(me)} (uid: {me.id}) -> –ø–æ–ª—É—á–∏–ª –æ—à–∏–±–∫—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ–∫–∞: {err}.")
                    continue

            final_message = (await client(GetMessagesRequest(id=[m.id]))).messages[0]  # –ø–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

            logger.info(f"{get_display_name(me)} (uid: {me.id}) -> {final_message.message}")
            await client.send_message(OWNER_USERNAME, final_message.message)  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É
        except Exception as err:
            logger.error(f"{get_display_name(me)} (uid: {me.id}) -> –í–æ–∑–Ω–∏–∫–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {err}")

        logger.info(f"{get_display_name(me)} (uid: {me.id}) -> –û—Ç–∫–ª—é—á–∞–µ–º—Å—è...")
        await client.disconnect()

    logger.info("–°–µ—Å—Å–∏–∏ –∫–æ–Ω—á–∏–ª–∏—Å—å!")


if __name__ == "__main__":
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(main())
